#!/bin/sh

# =============================================================================
# Utilities
# =============================================================================

_fail() {
    echo "Last compilation step failed, exiting"
    exit 1
}

_get_and_check_binary() {
    BINARY_PATH="$(which $1)"
    if [ $? != 0 ]; then
        echo "Binary $1 not found"
        exit 1
    elif [ ! -x "$BINARY_PATH" ]; then
        echo "Binary $BINARY_PATH not executable"
        exit 1
    fi
    echo $BINARY_PATH
}

# =============================================================================
# File & project
# =============================================================================

if [ -n "$1" ]; then
    FILE="$(pwd)"/"$1"
elif [ -z "$FILE" ]; then
    FILE=/var/tex/main.tex
fi

if [ ! -r "$FILE" ]; then
    echo "File $FILE is not readable"
    exit 1
fi

FILE_NAME="$(basename $FILE)"
PROJECT_NAME="$(basename $FILE_NAME .tex)"
PROJECT_DIR="$(dirname $(readlink -f $FILE))"

SIMPLERUN="yes" # If the compiler should be run more than once

# =============================================================================
# Working dir
# =============================================================================

if [ "$WORKING_DIR" = "no" -o "$WORKING_DIR" = "NO" ]; then
    WORKING_DIR="$PROJECT_DIR"
else
    WORKING_DIR="${WORKING_DIR:-/tmp/tex}"
fi

# =============================================================================
# Bibliography
# =============================================================================

if [ -n "$BIBLIOGRAPHY" ]; then
    if [ "$BIBLIOGRAPHY" = "yes" -o "$BIBLIOGRAPHY" = "YES" ]; then
        BIBLIOGRAPHY=bibtex
    fi
    BIBLIOGRAPHY_PATH="$(_get_and_check_binary $BIBLIOGRAPHY)"
    SIMPLERUN="no"
fi

step_bibliography() {
    local MODE=p
    if [ "$WORKING_DIR" != "$PROJECT_DIR" ]; then
        MODE=a
    fi
    for AUXFILE in "$WORKING_DIR"/*.aux ; do
        openout_any=$MODE $BIBLIOGRAPHY $BIBLIOGRAPHY_FLAGS "$AUXFILE"
    done
}

# =============================================================================
# Compiler
# =============================================================================

COMPILER="${COMPILER:-xelatex}"
COMPILER_PATH="$(_get_and_check_binary "$COMPILER")"
COMPILER_FLAGS="-interaction=nonstopmode -output-directory $WORKING_DIR $COMPILER_FLAGS"

step_compile() {
    $COMPILER $COMPILER_FLAGS "$FILE_NAME"
}

# =============================================================================
# Makeindex
# =============================================================================

if [ -n "$MAKEINDEX" ]; then
    if [ "$MAKEINDEX" = "yes" -o "$MAKEINDEX" = "YES" ]; then
        MAKEINDEX=makeindex
    fi
    MAKEINDEX_PATH="$(_get_and_check_binary $MAKEINDEX)"
    SIMPLERUN="no"
fi

MAKEINDEX_FLAGS="-o $WORKING_DIR/$PROJECT_NAME.ind -t $WORKING_DIR/$PROJECT_NAME.ilg $MAKEINDEX_FLAGS"

step_makeindex() {
    openout_any=a $MAKEINDEX $MAKEINDEX_FLAGS "$WORKING_DIR"/"$PROJECT_NAME.idx"
}

# =============================================================================
# Actual compilation
# =============================================================================

echo "
--------------------------------------------------
Project directory:  $PROJECT_DIR
Working directory:  $WORKING_DIR
File:               $FILE_NAME
Compiler:           $COMPILER_PATH
Compiler flags:     $COMPILER_FLAGS
Simple run?         $SIMPLERUN
Bibliography:       $BIBLIOGRAPHY_PATH
Bibliography flags: $BIBLIOGRAPHY_FLAGS
Makeindex:          $MAKEINDEX_PATH
Makeindex flags:    $MAKEINDEX_FLAGS
--------------------------------------------------
"

mkdir --parents "$WORKING_DIR"

cd $PROJECT_DIR

step_compile || _fail

if [ -n "$BIBLIOGRAPHY" ]; then
    step_bibliography || _fail
fi

if [ -n "$MAKEINDEX" ]; then
    step_makeindex || _fail
fi

if [ "$SIMPLERUN" = "no" ]; then
    step_compile || _fail
fi

step_compile || _fail

if [ "$WORKING_DIR" != "$PROJECT_DIR" ]; then
    cp "$WORKING_DIR"/"$PROJECT_NAME.pdf" .
fi
